<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Sam Smith</title><link>https://sams96.github.io/categories/programming/</link><description>Recent content in Programming on Sam Smith</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Tue, 27 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://sams96.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Always Sort by ID — An Interesting Gotcha</title><link>https://sams96.github.io/always-sort-by-ID/</link><pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate><guid>https://sams96.github.io/always-sort-by-ID/</guid><description>&lt;p>If you&amp;rsquo;re writing a database query for your web service and there&amp;rsquo;s pagination,
you should always sort by a unique field like ID. This should also be done on
top of any other sorting. Otherwise you can get double entries or lose results
across pages.&lt;/p>
&lt;/br>
&lt;p>A sort can be non-determinstic, as in if you have multiple items with the same
value in the field you are sorting by, there are multiple valid ways to sort it.
This can be okay, until you need that sorting to persist through multiple
queries, as you will when using pagination. This means that your query for your
second page could sort your results differently and give the same entry again,
or completely miss an entry. In the example below, both tables show valid ways
to sort by Customer Name, but give different results which in this case leads to
one order being missed and another shown twice.&lt;/p>
&lt;h3 id="page-1">Page 1&lt;/h3>
&lt;p>The first two results are returned.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>&lt;strong>ID&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Customer name&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Item Ordered&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>-&amp;gt;&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>Alan&lt;/td>
 &lt;td>Apple&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>-&amp;gt;&lt;/td>
 &lt;td>2&lt;/td>
 &lt;td>Betty&lt;/td>
 &lt;td>Banana&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>3&lt;/td>
 &lt;td>Betty&lt;/td>
 &lt;td>Grape&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>4&lt;/td>
 &lt;td>Callum&lt;/td>
 &lt;td>Apple&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;h3 id="page-2">Page 2&lt;/h3>
&lt;p>Now with an offset of 2 the third and forth results are returned, but because we
are sorting in an non-determinstic way, the order has changed and we get
different results than expected.&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>&lt;/th>
 &lt;th>&lt;strong>ID&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Customer name&lt;/strong>&lt;/th>
 &lt;th>&lt;strong>Item Ordered&lt;/strong>&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>1&lt;/td>
 &lt;td>Alan&lt;/td>
 &lt;td>Apple&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>&lt;/td>
 &lt;td>3&lt;/td>
 &lt;td>Betty&lt;/td>
 &lt;td>Grape&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>-&amp;gt;&lt;/td>
 &lt;td>2&lt;/td>
 &lt;td>Betty&lt;/td>
 &lt;td>Banana&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>-&amp;gt;&lt;/td>
 &lt;td>4&lt;/td>
 &lt;td>Callum&lt;/td>
 &lt;td>Apple&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>This only applies when using the classic &lt;code>LIMIT&lt;/code> and &lt;code>OFFSET&lt;/code> method of
pagination. &lt;a href="https://www.citusdata.com/blog/2016/03/30/five-ways-to-paginate/">Other methods are
available&lt;/a>,
but those tend to come with other downsides that make them less viable for the
type of web services I work on, requiring either more resources or less
flexibility.&lt;/p>
&lt;p>The simple solution here is to just always include a sort by a unique ID, on top
of any existing sorting or any requested by the client. That way your sorting is
always deterministic and no results are lost.&lt;/p></description></item><item><title>Rgeo — 5 Years On</title><link>https://sams96.github.io/rgeo-5-years-on/</link><pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate><guid>https://sams96.github.io/rgeo-5-years-on/</guid><description>&lt;p>5 years ago I wrote &lt;a href="https://github.com/sams96/rgeo">Rgeo&lt;/a>, a small Go package
for reverse geocoding (you input some coordinates, it gives you information
about the location). Today I am putting the projected on an indefinite hiatus.&lt;/p>
&lt;/br>
&lt;p>That&amp;rsquo;s maybe a tad dramatic for my little project that I barely touch anyway,
but I thought I should be clear about the fact that I&amp;rsquo;m not really working on it
at all, and I thought I&amp;rsquo;d just write up my thoughts about it here.&lt;/p>
&lt;/br>
&lt;p>In the time since, Rgeo has been noticed somewhat (much more than I expected),
gaining over 50 stars on GitHub and getting some really nice contributions. I am
very happy with how the project has been received by others, despite my neglect.&lt;/p>
&lt;p>My main motivation for writing Rgeo in the first place was as a portfolio piece,
something that I could show prospective employers to prove that I can write
decent Go code, since at that time I didn&amp;rsquo;t have any professional experience. It
served that purpose well, I got a job writing Go not long after the initial
release. And after that I lost the motivation to work on it, since I had a full
time job writing Go.&lt;/p>
&lt;p>I have been reflecting on this project recently because, despite the fact that I
am still waiting Go professionally, I&amp;rsquo;ve had some more motivation to work on my
own projects, but not this project. I don&amp;rsquo;t have any use for the package myself
so I’m not finding issues nor coming up with new features to add.&lt;/p>
&lt;h2 id="what-to-use-now">What to use now&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/smilyorg/tinygpkg">smilyorg/tinygpkg&lt;/a> - Very nice package
inspired by Rgeo. It uses a different approach to vastly reduce startup time at
the cost of slightly slower queries.&lt;/li>
&lt;li>&lt;a href="https://github.com/authenticvision/rgeo">authenticvision/rgeo&lt;/a> - The most
active fork of Rgeo, and most of the contributions I’ve had have come from
these guys.&lt;/li>
&lt;li>Rgeo - There’s no external API calls here so I don’t really see there being
any security concerns, and I will try to keep dependencies up to date and be
better at merging any fixes that come in. There just won’t be any new features
for the time being (not that there has been for a while).&lt;/li>
&lt;/ul>
&lt;h2 id="rgeo-v20">Rgeo v2.0&lt;/h2>
&lt;p>I have an idea of what I would like to do for a version 2 if I ever come back to
this project, and that is to split the querying logic (which would stay in the
main package) from the parts specific to the natural earth data geojson files
used (which would go into a new sub-package). This would provide a more general
use for the package in handling data from any source while still giving easy
access to the same existing functionality. I also like
&lt;a href="https://github.com/SaTae66">SaTae66&lt;/a>’s snapping PR, but I wonder if similarly
things could be generalised and more tools could be provided, for example
querying for the closest geojson feature to a given point.&lt;/p></description><comments>https://toot.io/@mondoman712/114126461240720151</comments></item><item><title>Applying Hexagonal Architecture to a Mid-Size Go Backend</title><link>https://sams96.github.io/go-project-layout/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://sams96.github.io/go-project-layout/</guid><description>&lt;p>I&amp;rsquo;ve been working on web backends in Go for the past 5 years, and on various
projects of covering a range of ages from brand new greenfield projects to one
built on top of a core that predates the Go language. The needs of these
backends tend not to be overly complex, handling user management, payments, and
a relativly simple product. They&amp;rsquo;re maintained by teams of 2-20 backend
engineers and work with a SPA web frontend communicating with JSON over HTTP.&lt;/p>
&lt;p>With my most recent work being mostly greenfield, I&amp;rsquo;ve been thinking more about
how I can apply what I&amp;rsquo;ve learned from my colleagues working on older projects,
and avoid decisions made in the name of moving fast which cause a lot of pain
further down the line.&lt;/p>
&lt;/br>
&lt;p>What needs to be considered when it comes to layout out a project is finding the
right balance of flexibility without over-abstracting. You want to be able to
move quickly and adapt to ever-changing requirements without being slowed down
by your own code. This heavily depends on what you&amp;rsquo;re working on, but I&amp;rsquo;m going
present what I find works for me for the type of projects I have experience
working on.&lt;/p>
&lt;p>I arrived at this layout not purely by attempting to apply hexagonal
architecture to the projects I have worked on. It is something that I have read
about and is often brought up when it comes to Go project layouts, but I have
arrived here mostly through my experience and by thinking about how to find the
right level of abstraction that works well for these projects.&lt;/p>
&lt;p>Hexagonal architecture splits packages into one of two types: the application&amp;rsquo;s
core and its adapters. The core being the part that defines your application&amp;rsquo;s
business logic and ties the adapters together, and the adapters being wrappers
around external services or other external communication. I would further add a
third type to this, which is utility packages that fill neither of the above
roles.&lt;/p>
&lt;h2 id="core">Core&lt;/h2>
&lt;p>Core packages should contain all of your main type definitions which the
adapters will also be built around, as well as functions defining the actions
that can take place. In the simplest case this could just be a wrapper around a
database function, but it could also involve much more, including validation and
coordination of different adapters.&lt;/p>
&lt;p>You can split your core where you have clear seperation between domains. A
simple example of this is splitting the user management away from the actual
functionality of your application (assuming that the functionailty isn&amp;rsquo;t heavily
relieant on user management). If your application is small, you can just leave
it all in one package. If you aren&amp;rsquo;t sure, just leave it in one package until
clear lines emerge&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>Below I have used a simple user management package as an example framework for a
core package. I have omitted contexts (which you really should be passing) and
imports for brevity. &lt;em>All code samples in this article are for illustrative
purposes only, don&amp;rsquo;t expect them to work as is&lt;/em>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">package&lt;/span> users
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">type&lt;/span> User &lt;span style="font-weight:bold">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ID uuid.UUID
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Email &lt;span style="color:#458;font-weight:bold">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">type&lt;/span> UserStorer &lt;span style="font-weight:bold">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#900;font-weight:bold">NewUser&lt;/span>(email, password &lt;span style="color:#458;font-weight:bold">string&lt;/span>) (&lt;span style="font-weight:bold">*&lt;/span>User, &lt;span style="color:#458;font-weight:bold">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">type&lt;/span> Manager &lt;span style="font-weight:bold">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	store UserStorer
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> &lt;span style="color:#900;font-weight:bold">NewManager&lt;/span>(store UserStorer) &lt;span style="font-weight:bold">*&lt;/span>Manager {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Manager{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		store: store,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> (m &lt;span style="font-weight:bold">*&lt;/span>Manager) &lt;span style="color:#900;font-weight:bold">New&lt;/span>(email, password &lt;span style="color:#458;font-weight:bold">string&lt;/span>) (&lt;span style="font-weight:bold">*&lt;/span>User, &lt;span style="color:#458;font-weight:bold">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>UserStorer&lt;/code> here will likely only have one definition. Even though as
developers we like the idea of having flexibility to swap out the database
easily, in my experience in a commercial setting it&amp;rsquo;s very unlikely to happen.
I also don&amp;rsquo;t think it&amp;rsquo;s really needed for testing, I would just write
integration tests here and run against the DB instead of mocking it. That said,
I like to have the interface defined here anyway because it fits nicely with the
philosphy of core package and having it define what the adapters do.&lt;/p>
&lt;p>Ideally, your core packages won&amp;rsquo;t be dependant on each other and you can keep
everything entirely separate, however this often isn&amp;rsquo;t the case. In some simple
cases, you can just rely on the layer above (the driving adapter, see below) to
call separate functions in different core packages. For more complex
dependencies, I think it&amp;rsquo;s fine for the core packages to sometimes be dependant
on one another (i.e my user manager might include a manager of another domain).
The Go compiler&amp;rsquo;s blocking of circular dependencies should prevent things from
getting too complex here.&lt;/p>
&lt;h2 id="adapters">Adapters&lt;/h2>
&lt;p>Adapters are what let your core code communicate with the outside world. They
generally exist either as a wrapper around some third party service in order for
it to conform to an interface that has been defined in the core, the obvious
example being your database layer, or as an API calling the functions in your
core package. These are sometimes referred to as &lt;em>driven&lt;/em> and &lt;em>driving&lt;/em>
adapters.&lt;/p>
&lt;h3 id="driven-adapters">Driven Adapters&lt;/h3>
&lt;p>Driven adapters are those called by your core package, and should satisy the
interface defined there. The most common example, and the one I&amp;rsquo;ve used as an
example below is a database but they could also easily be a key-value store or
object storage. Beyond that, the same pattern can be used to send analytics
events or transactional emails.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">package&lt;/span> postgres
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">type&lt;/span> DB &lt;span style="font-weight:bold">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	db &lt;span style="font-weight:bold">*&lt;/span>sqlx.DB
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> &lt;span style="color:#900;font-weight:bold">NewDB&lt;/span>(&lt;span style="color:#998;font-style:italic">/* connection info */&lt;/span>) &lt;span style="font-weight:bold">*&lt;/span>DB { &lt;span style="font-weight:bold">...&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> (db &lt;span style="font-weight:bold">*&lt;/span>DB) &lt;span style="color:#900;font-weight:bold">NewUser&lt;/span>(email, password &lt;span style="color:#458;font-weight:bold">string&lt;/span>) (&lt;span style="font-weight:bold">*&lt;/span>User, &lt;span style="color:#458;font-weight:bold">error&lt;/span>) { &lt;span style="font-weight:bold">...&lt;/span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>I would keep all of the code relating to a single external service in the same
package, so even if you have multiple core packages interacting with one. If
it&amp;rsquo;s a single db, all of the database code can go in one place&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;h3 id="driving-adapters">Driving Adapters&lt;/h3>
&lt;p>A driving adapter is one that calls the functions in your core, and makes them
available externally. For this example I&amp;rsquo;m going to use a simple &lt;em>REST&lt;/em>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> API
for our user service, designed for some SPA frontend, as this is what I have
most commonly encountered.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">package&lt;/span> webapi
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">type&lt;/span> Handlers &lt;span style="font-weight:bold">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	users &lt;span style="font-weight:bold">*&lt;/span>users.Manager
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> &lt;span style="color:#900;font-weight:bold">NewHandlers&lt;/span>(users &lt;span style="font-weight:bold">*&lt;/span>users.Manager) &lt;span style="font-weight:bold">*&lt;/span>Handlers {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-weight:bold">return&lt;/span> &lt;span style="font-weight:bold">&amp;amp;&lt;/span>Handlers{users: users}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> (h &lt;span style="font-weight:bold">*&lt;/span>Handlers) &lt;span style="color:#900;font-weight:bold">Route&lt;/span>(mux &lt;span style="font-weight:bold">*&lt;/span>http.ServeMux) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	mux.&lt;span style="color:#900;font-weight:bold">HandleFunc&lt;/span>(&lt;span style="color:#b84">&amp;#34;POST /register&amp;#34;&lt;/span>, h.handlePostRegister)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> (h &lt;span style="font-weight:bold">*&lt;/span>Handlers) &lt;span style="color:#900;font-weight:bold">handlePostRegister&lt;/span>(w http.ResponseWriter, r &lt;span style="font-weight:bold">*&lt;/span>http.Request) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-weight:bold">var&lt;/span> req postRegisterRequest
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	err &lt;span style="font-weight:bold">:=&lt;/span> json.&lt;span style="color:#900;font-weight:bold">NewDecoder&lt;/span>(r.Body).&lt;span style="color:#900;font-weight:bold">Decode&lt;/span>(&lt;span style="font-weight:bold">&amp;amp;&lt;/span>req)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">!=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#998;font-style:italic">/* handle error */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	user, err &lt;span style="font-weight:bold">:=&lt;/span> h.users.&lt;span style="color:#900;font-weight:bold">New&lt;/span>(req.Email, req.Password)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">!=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#998;font-style:italic">/* handle error */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	resp &lt;span style="font-weight:bold">:=&lt;/span> postRegisterResponse{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		UserID: user.ID,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	err = json.&lt;span style="color:#900;font-weight:bold">NewEncoder&lt;/span>(w).&lt;span style="color:#900;font-weight:bold">Encode&lt;/span>(&lt;span style="font-weight:bold">&amp;amp;&lt;/span>resp)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">!=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#998;font-style:italic">/* handle error */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	w.&lt;span style="color:#900;font-weight:bold">WriteHeader&lt;/span>(http.StatusCreated)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When it comes to factoring this package, I like to divide it by intended
consumer, so routes for your SPA frontend go in one place, and webhook handlers
go in another etc. That way the request and reply formats and expectations of
all routes in one package is the same, as is the authentication.&lt;/p>
&lt;h2 id="utilities">Utilities&lt;/h2>
&lt;p>Utility packages are those that don&amp;rsquo;t fit into either previous category, by both
not implementing business logic and not interacting direcltly with an external
service. Aside from any convenience abstractions that you want to reuse in
multiple packages, the main thing I expect to fit this category in our web app
is authorization. Auth &lt;em>kind of&lt;/em> fits in with the driving adapter, but also
splits of nicely, and if you&amp;rsquo;re exposing multiple APIs you&amp;rsquo;re probably going to
reuse some of the code.&lt;/p>
&lt;p>Also, don&amp;rsquo;t take this category as a suggestion to create a &lt;code>utils&lt;/code> package.
Generically named packages like this are recommended against in go, and &lt;em>A
little copying is better than a little dependancy&lt;/em>&lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;h2 id="conclusion-and-other-thoughts">Conclusion and other thoughts&lt;/h2>
&lt;p>When it comes to the folder structure, I would advise keeping everything as flat
as possible, Subfolders are nice where you have a bunch of non-go files related
to a package, such as your database migrations. You probably don&amp;rsquo;t need a &lt;code>src&lt;/code>,
&lt;code>pkg&lt;/code>, or &lt;code>internal&lt;/code> folder to contain other packages. You can just leave
everything in the top level of your repo. These make sense in very large
projects like &lt;a href="https://github.com/moby/moby">Moby&lt;/a> or
&lt;a href="https://github.com/kubernetes/kubernetes">Kubernetes&lt;/a>, but for our web service
you&amp;rsquo;re just making things harder to find. Leave it at the top level until that
starts to cause issues.&lt;/p>
&lt;/br>
&lt;p>As I said at the top, this is the layout that I&amp;rsquo;ve arrived at from my experience
working on commercial web backends in Go. I think it&amp;rsquo;s a practical level of
abstraction to stay flexible without spending too much time or adding too much
complexity.&lt;/p>
&lt;p>You might think that there isn&amp;rsquo;t actually much to what I have
suggested here, but that&amp;rsquo;s part of the point. You don&amp;rsquo;t need much abstraction
and not having it will help reduce the mental load of working on your codebase,
allowing you to focus on productive work and for new developers to be onboarded
more easily.&lt;/p>
&lt;h3 id="further-reading">Further Reading&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://alistair.cockburn.us/hexagonal-architecture/">Hexagonal architecture&lt;/a> - Alistair Cockburn&lt;/li>
&lt;li>&lt;a href="https://go.dev/blog/package-names">Package names&lt;/a> - Sameer Ajmani&lt;/li>
&lt;li>&lt;a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is exponentially more&lt;/a> - Rob Pike&lt;/li>
&lt;/ul>
&lt;div class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a href="https://grugbrain.dev/#grug-on-factring-your-code">Don&amp;rsquo;t factor early&lt;/a>&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2">
&lt;p>At least until you start splitting your tables into different schemas.&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3">
&lt;p>This isn&amp;rsquo;t actually REST, but is often referred to as REST, see
&lt;a href="https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/">&lt;em>How Did REST Come To Mean The Opposite of REST?&lt;/em>&lt;/a>&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4">
&lt;p>From &lt;a href="https://www.youtube.com/watch?v=PAAkCSZUG1c&amp;amp;t=568s">Go Proverbs with Rob Pike&lt;/a>
at Gopherfest 2015&amp;#160;&lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div></description><comments>https://toot.io/@mondoman712/114071633084030867</comments></item><item><title>Rgeo — A Go package for basic, fast, local reverse geocoding</title><link>https://sams96.github.io/rgeo/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://sams96.github.io/rgeo/</guid><description>&lt;p>&lt;a href="https://github.com/sams96/rgeo">Rgeo&lt;/a> is a fast, simple solution for local
reverse geocoding, Rather than relying on external software or online APIs, rgeo
packages all of the data it needs in your binary. This means it will only ever
work down to the level of cities , but if that&amp;rsquo;s all you need then this is the
library for you.&lt;/p>
&lt;p>Rgeo uses data from &lt;a href="https://naturalearthdata.com">naturalearthdata.com&lt;/a>, if
your coordinates are going to be near specific borders I would advise checking
the data beforehand (links to which are in the files). If you want to use your
own dataset, check out
&lt;a href="https://github.com/sams96/rgeo/tree/master/datagen">datagen&lt;/a>.&lt;/p>
&lt;h2 id="key-features">Key Features&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>Fast&lt;/strong> - So I haven&amp;rsquo;t &lt;em>actually&lt;/em> benchmarked other reverse geocoding tools
but on my laptop rgeo can run at under 800ns/op.&lt;/li>
&lt;li>&lt;strong>Local&lt;/strong> - Rgeo doesn&amp;rsquo;t require pinging some API, most of which either cost
money to use or have severe rate limits.&lt;/li>
&lt;li>&lt;strong>Lightweight&lt;/strong> - The rgeo repo is 141MB, which is large for a Go package but
compared to the 800GB needed for a full planet install of
&lt;a href="https://nominatim.org/release-docs/latest/admin/Installation/#hardware">Nominatim&lt;/a>
it&amp;rsquo;s miniscule.&lt;/li>
&lt;/ul>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;p>Download with&lt;/p>
&lt;pre>&lt;code>go get github.com/sams96/rgeo
&lt;/code>&lt;/pre>
&lt;p>and add&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">import&lt;/span> &lt;span style="color:#b84">&amp;#34;github.com/sams96/rgeo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>to the top of your Go file to include it in your project.&lt;/p>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>r, err &lt;span style="font-weight:bold">:=&lt;/span> &lt;span style="color:#900;font-weight:bold">New&lt;/span>(Provinces10, Cities10)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">!=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// Handle error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>loc, err &lt;span style="font-weight:bold">:=&lt;/span> r.&lt;span style="color:#900;font-weight:bold">ReverseGeocode&lt;/span>([]&lt;span style="color:#458;font-weight:bold">float64&lt;/span>{&lt;span style="color:#099">141.35&lt;/span>, &lt;span style="color:#099">43.07&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">!=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// Handle error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Println&lt;/span>(loc)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// Output: &amp;lt;Location&amp;gt; Sapporo, Hokkaido, Japan (JPN), Asia&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First initialise rgeo using &lt;code>rgeo.New&lt;/code>,&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> &lt;span style="color:#900;font-weight:bold">New&lt;/span>(datasets &lt;span style="font-weight:bold">...&lt;/span>&lt;span style="font-weight:bold">func&lt;/span>() []&lt;span style="color:#458;font-weight:bold">byte&lt;/span>) (&lt;span style="font-weight:bold">*&lt;/span>Rgeo, &lt;span style="color:#458;font-weight:bold">error&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>which takes any non-zero number of datasets as arguments. The included datasets
are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Countries110&lt;/code> - Just country information, smallest and lowest detail of the
included datasets.&lt;/li>
&lt;li>&lt;code>Countries10&lt;/code> - The same as above but with more detail.&lt;/li>
&lt;li>&lt;code>Provinces10&lt;/code> - Includes province information as well as country, so can
still be used alone.&lt;/li>
&lt;li>&lt;code>Cities10&lt;/code> - Just city information, if you want provinces and/or countries as
well use one of the above datasets with it.
Once initialised you can use &lt;code>ReverseGeocode&lt;/code> on the value returned by &lt;code>New&lt;/code>,
with your coordinates to get the location information. See the &lt;a href="https://pkg.go.dev/github.com/sams96/rgeo">Go
Docs&lt;/a> for more information on usage.&lt;/li>
&lt;/ul>
&lt;p>Then use &lt;code>ReverseGeocode&lt;/code> to get the location information of the given coordinate.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">func&lt;/span> (r &lt;span style="font-weight:bold">*&lt;/span>Rgeo) &lt;span style="color:#900;font-weight:bold">ReverseGeocode&lt;/span>(loc geom.Coord) (Location, &lt;span style="color:#458;font-weight:bold">error&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The input is a &lt;a href="https://github.com/twpayne/go-geom">&lt;code>geom.Coord&lt;/code>&lt;/a>, which is just
a &lt;code>[]float64&lt;/code> with the longitude in the zeroth position and the latitude in the
first position (i.e. &lt;code>[]float64{lon, lat}&lt;/code>). &lt;code>ReverseGeocode&lt;/code> returns a
&lt;code>Location&lt;/code>, which looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">type&lt;/span> Location &lt;span style="font-weight:bold">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// Commonly used country name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Country &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;country,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// Formal name of country&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	CountryLong &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;country_long,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// ISO 3166-1 alpha-1 and alpha-2 codes&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	CountryCode2 &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;country_code_2,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	CountryCode3 &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;country_code_3,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Continent &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;continent,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Region &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;region,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	SubRegion &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;subregion,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	Province &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;province,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// ISO 3166-2 code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	ProvinceCode &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;province_code,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	City &lt;span style="color:#458;font-weight:bold">string&lt;/span> &lt;span style="color:#b84">`json:&amp;#34;city,omitempty&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>So, to put it all together:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>r, err &lt;span style="font-weight:bold">:=&lt;/span> rgeo.&lt;span style="color:#900;font-weight:bold">New&lt;/span>(Countries110)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">!=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// Handle error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>loc, err &lt;span style="font-weight:bold">:=&lt;/span> r.&lt;span style="color:#900;font-weight:bold">ReverseGeocode&lt;/span>([]&lt;span style="color:#458;font-weight:bold">float64&lt;/span>{&lt;span style="color:#099">0&lt;/span>, &lt;span style="color:#099">52&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="font-weight:bold">if&lt;/span> err &lt;span style="font-weight:bold">!=&lt;/span> &lt;span style="font-weight:bold">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#998;font-style:italic">// Handle error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Printf&lt;/span>(&lt;span style="color:#b84">&amp;#34;%s\n&amp;#34;&lt;/span>, loc.Country)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Printf&lt;/span>(&lt;span style="color:#b84">&amp;#34;%s\n&amp;#34;&lt;/span>, loc.CountryLong)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Printf&lt;/span>(&lt;span style="color:#b84">&amp;#34;%s\n&amp;#34;&lt;/span>, loc.CountryCode2)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Printf&lt;/span>(&lt;span style="color:#b84">&amp;#34;%s\n&amp;#34;&lt;/span>, loc.CountryCode3)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Printf&lt;/span>(&lt;span style="color:#b84">&amp;#34;%s\n&amp;#34;&lt;/span>, loc.Continent)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Printf&lt;/span>(&lt;span style="color:#b84">&amp;#34;%s\n&amp;#34;&lt;/span>, loc.Region)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>fmt.&lt;span style="color:#900;font-weight:bold">Printf&lt;/span>(&lt;span style="color:#b84">&amp;#34;%s\n&amp;#34;&lt;/span>, loc.SubRegion)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// Output: United Kingdom&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// United Kingdom of Great Britain and Northern Ireland&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// GB&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// GBR&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// Europe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// Europe&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#998;font-style:italic">// Northern Europe&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="projects-using-rgeo">Projects using rgeo&lt;/h2>
&lt;p>Currently the only project that I know of is my own
&lt;a href="https://github.com/sams96/rgeoSrv">rgeoSrv&lt;/a>, which aims to wrap rgeo into a
microservice. I am also planning on writing a command line appication to apply
IPTC location tags to images that already contain geolocation information.&lt;/p>
&lt;h2 id="how-it-works">How it works&lt;/h2>
&lt;p>The data used by rgeo is made from a collection of GeoJSON files aquired from
&lt;a href="https://github.com/nvkelso/natural-earth-vector/tree/master/geojson">Natural Earth
Data&lt;/a>,
which are packaged into Go files by
&lt;a href="https://github.com/sams96/rgeo/tree/master/datagen">datagen&lt;/a>. The go files
contain functions which return byte slices that contain the base 64 encoded,
gzipped GeoJSON files. They&amp;rsquo;re packaged into function because that seems to be
the only way to have the Go compiler ignore them if they aren&amp;rsquo;t used (so your
program isn&amp;rsquo;t inflated by huge data files that you aren&amp;rsquo;t using).&lt;/p>
&lt;p>&lt;code>New&lt;/code> takes the datasets, decodes the data and parses the GeoJSON. It creates an
&lt;code>Rgeo&lt;/code> struct which contains an &lt;a href="https://github.com/golang/geo">s2&lt;/a> shape index,
a map to store the location information of each area and an s2 contains point
query. The shape index contains s2 polygons for each of the areas in the given
dataset, and the contains point query is what goes from the input coordinates to
a shape. The map is then used to get the location information from the shape.&lt;/p>
&lt;p>One thing I discovered through working on this is initialising s2 loops and
polygons is very slow and there&amp;rsquo;s no way to store them that doesn&amp;rsquo;t have to run
all the validation code upon loading them. I found that going from creating the
s2 types every time to using geom&amp;rsquo;s &lt;code>IsPointInRing&lt;/code> function yields a ~100x
speed increase. I used s2 types because I wrote rgeo to be used many times in a
program rather than a few, and s2&amp;rsquo;s contains point query is &lt;em>very&lt;/em> fast
(although I don&amp;rsquo;t have any benchmarks to hand).&lt;/p></description></item></channel></rss>